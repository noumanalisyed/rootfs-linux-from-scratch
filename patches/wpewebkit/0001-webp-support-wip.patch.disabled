diff --git a/Source/WebCore/platform/image-decoders/webp/WEBPImageDecoder.cpp b/Source/WebCore/platform/image-decoders/webp/WEBPImageDecoder.cpp
index 4a38f58..4f07e36 100644
--- a/Source/WebCore/platform/image-decoders/webp/WEBPImageDecoder.cpp
+++ b/Source/WebCore/platform/image-decoders/webp/WEBPImageDecoder.cpp
@@ -48,12 +48,21 @@ namespace WebCore {
 WEBPImageDecoder::WEBPImageDecoder(AlphaOption alphaOption, GammaAndColorProfileOption gammaAndColorProfileOption)
     : ImageDecoder(alphaOption, gammaAndColorProfileOption)
     , m_decoder(0)
-    , m_hasAlpha(false)
+    , m_formatFlags(0)
+    , m_frameBackgroundHasAlpha(false)
+    , m_demux(0)
+    , m_demuxState(WEBP_DEMUX_PARSING_HEADER)
+    , m_haveAlreadyParsedThisData(false)
+    , m_repetitionCount(WebCore::RepetitionCountOnce)
+    , m_decodedHeight(0)
 {
+    WebPInitDecBuffer(&m_decoderBuffer);
 }
 
 WEBPImageDecoder::~WEBPImageDecoder()
 {
+    WebPDemuxDelete(m_demux);
+    m_demux = 0;
     clear();
 }
 
@@ -62,37 +71,308 @@ void WEBPImageDecoder::clear()
     if (m_decoder)
         WebPIDelete(m_decoder);
     m_decoder = 0;
+    m_frameBackgroundHasAlpha = false;
+    m_decodedHeight = 0;
 }
 
 bool WEBPImageDecoder::isSizeAvailable()
 {
     if (!ImageDecoder::isSizeAvailable())
-         decode(true);
+        updateDemuxer();
+    // FIXME: non-animation fallback?
+        //decode(0, nullptr, true);
 
     return ImageDecoder::isSizeAvailable();
 }
 
-ImageFrame* WEBPImageDecoder::frameBufferAtIndex(size_t index)
+size_t WEBPImageDecoder::frameCount() const
 {
-    if (index)
+    if (!const_cast<WEBPImageDecoder*>(this)->updateDemuxer())
         return 0;
 
+    // FIXME: non-animation fallback?
+    /*
     if (m_frameBufferCache.isEmpty())
         m_frameBufferCache.resize(1);
+    */
+
+    return m_frameBufferCache.size();
+}
+
+ImageFrame* WEBPImageDecoder::frameBufferAtIndex(size_t index)
+{
+    if (index >= frameCount())
+        return 0;
+
+    ImageFrame& frame = m_frameBufferCache[index];
+    if (frame.isComplete())
+        return &frame;
+
+    if (1 /* RuntimeEnabledFeatures::animatedWebPEnabled() */) {
+        Vector<size_t> framesToDecode;
+        size_t frameToDecode = index;
+        framesToDecode.append(frameToDecode);
+        while (frameToDecode > 0 && !m_frameBufferCache[frameToDecode - 1].isComplete())
+            framesToDecode.append(--frameToDecode);
 
-    ImageFrame& frame = m_frameBufferCache[0];
-    if (!frame.isComplete())
-        decode(false);
+        //do {
+            // see Chromium commit 6e5bde615781b310f8e6f03bc4e81b6a5f993bf2
+            //frameToDecode = m_frameBufferCache[frameToDecode].requiredPreviousFrameIndex();
+        //} while (frameToDecode != notFound && m_frameBufferCache[frameToDecode].status() != ImageFrame::FrameComplete);
+
+        ASSERT(m_demux);
+        for (size_t i = framesToDecode.size(); i > 0; --i) {
+            size_t frameIndex = framesToDecode[i - 1];
+
+            WebPIterator webpFrame;
+            if (!WebPDemuxGetFrame(m_demux, frameIndex + 1, &webpFrame))
+                return 0;
+            decode(frameIndex, &webpFrame, false);
+            WebPDemuxReleaseIterator(&webpFrame);
+
+            // We need more data to continue decoding.
+            if (!m_frameBufferCache[frameIndex].isComplete())
+                break;
+        }
+
+        // It is also a fatal error if all data is received and we have decoded all
+        // frames available but the file is truncated.
+        if (index >= m_frameBufferCache.size() - 1 && isAllDataReceived() && m_demux && m_demuxState != WEBP_DEMUX_DONE)
+            setFailed();
+
+        return &frame;
+     }
+
+    decode(index, nullptr, false);
     return &frame;
 }
 
-bool WEBPImageDecoder::decode(bool onlySize)
+void WEBPImageDecoder::setData(SharedBuffer& data, bool allDataReceived)
+{
+    if (failed())
+        return;
+
+    ImageDecoder::setData(data, allDataReceived);
+
+    if (m_demuxState != WEBP_DEMUX_DONE)
+        m_haveAlreadyParsedThisData = false;
+}
+
+int WEBPImageDecoder::repetitionCount() const
+{
+    return failed() ? WebCore::RepetitionCountOnce : m_repetitionCount;
+}
+
+// FIXME
+//virtual void clearFrameBufferCache(size_t) { } 
+
+bool WEBPImageDecoder::updateDemuxer()
+{
+    if (m_haveAlreadyParsedThisData)
+        return true;
+
+    m_haveAlreadyParsedThisData = true;
+
+    const unsigned webpHeaderSize = 30; // RIFF_HEADER_SIZE + CHUNK_HEADER_SIZE + VP8_FRAME_HEADER_SIZE
+    if (m_data->size() < webpHeaderSize)
+        return false; // Await VP8X header so WebPDemuxPartial succeeds.
+
+    WebPDemuxDelete(m_demux);
+    WebPData inputData = { reinterpret_cast<const uint8_t*>(m_data->data()), m_data->size() };
+    m_demux = WebPDemuxPartial(&inputData, &m_demuxState);
+    if (!m_demux)
+        return setFailed();
+
+    ASSERT(m_demuxState > WEBP_DEMUX_PARSING_HEADER);
+    size_t newFrameCount = WebPDemuxGetI(m_demux, WEBP_FF_FRAME_COUNT);
+    if (!newFrameCount)
+        return false; // Wait until the encoded image frame data arrives.
+
+    if (!ImageDecoder::isSizeAvailable()) {
+        int width = WebPDemuxGetI(m_demux, WEBP_FF_CANVAS_WIDTH);
+        int height = WebPDemuxGetI(m_demux, WEBP_FF_CANVAS_HEIGHT);
+        if (!setSize(IntSize(width, height)))
+            return setFailed();
+
+        m_formatFlags = WebPDemuxGetI(m_demux, WEBP_FF_FORMAT_FLAGS);
+        if (!(m_formatFlags & ANIMATION_FLAG)) {
+            m_repetitionCount = WebCore::RepetitionCountNone;
+        } else {
+            // Since we have parsed at least one frame, even if partially,
+            // the global animation (ANIM) properties have been read since
+            // an ANIM chunk must precede the ANMF frame chunks.
+            m_repetitionCount = WebPDemuxGetI(m_demux, WEBP_FF_LOOP_COUNT);
+            ASSERT(m_repetitionCount == (m_repetitionCount & 0xffff)); // Loop count is always <= 16 bits.
+            if (!m_repetitionCount)
+                m_repetitionCount = WebCore::RepetitionCountInfinite;
+        }
+    }
+
+    ASSERT(ImageDecoder::isSizeAvailable());
+
+    const size_t oldFrameCount = m_frameBufferCache.size();
+    if (newFrameCount > oldFrameCount) {
+        m_frameBufferCache.resize(newFrameCount);
+        for (size_t i = oldFrameCount; i < newFrameCount; ++i) {
+            // FIXME
+            /*
+            m_frameBufferCache[i].setPremultiplyAlpha(m_premultiplyAlpha);
+            if (!m_formatFlags & ANIMATION_FLAG) {
+                ASSERT(!i);
+                m_frameBufferCache[i].setRequiredPreviousFrameIndex(notFound);
+                continue;
+            }
+            */
+            WebPIterator animatedFrame;
+            WebPDemuxGetFrame(m_demux, i + 1, &animatedFrame);
+            ASSERT(animatedFrame.complete == 1);
+            m_frameBufferCache[i].setDuration(animatedFrame.duration);
+            m_frameBufferCache[i].setDisposalMethod(animatedFrame.dispose_method == WEBP_MUX_DISPOSE_BACKGROUND ? ImageFrame::DisposalMethod::RestoreToBackground : ImageFrame::DisposalMethod::RestoreToPrevious);
+            WebPDemuxReleaseIterator(&animatedFrame);
+            //m_frameBufferCache[i].setRequiredPreviousFrameIndex(findRequiredPreviousFrame(i));
+        }
+    }
+    return true;
+}
+
+bool WEBPImageDecoder::initFrameBuffer(size_t frameIndex, const WebPIterator* webpFrame)
+{
+    ImageFrame& buffer = m_frameBufferCache[frameIndex];
+    if (!buffer.isEmpty()) // Already initialized.
+        return true;
+
+    if (webpFrame) {
+        // Initialize the frame rect in our buffer.
+        IntRect frameRect(webpFrame->x_offset, webpFrame->y_offset, webpFrame->width, webpFrame->height);
+
+        // Make sure the frameRect doesn't extend outside the buffer.
+        if (frameRect.maxX() > size().width())
+            frameRect.setWidth(size().width() - webpFrame->x_offset);
+        if (frameRect.maxY() > size().height())
+            frameRect.setHeight(size().height() - webpFrame->y_offset);
+
+        // FIXME: use this: const size_t requiredPreviousFrameIndex = buffer.requiredPreviousFrameIndex();
+        //if (requiredPreviousFrameIndex == notFound) {
+        if (frameIndex == 0) {
+            // This frame doesn't rely on any previous data.
+            if (!buffer.initialize(size(), m_premultiplyAlpha))
+                return setFailed();
+            m_frameBackgroundHasAlpha = !frameRect.contains(IntRect(IntPoint(), size()));
+        } else {
+            // FIXME: use this: const ImageFrame& prevBuffer = m_frameBufferCache[requiredPreviousFrameIndex];
+            const ImageFrame& prevBuffer = m_frameBufferCache[frameIndex - 1];
+            ASSERT(prevBuffer.status() == ImageFrame::FrameComplete);
+
+            // Preserve the last frame as the starting state for this frame.
+            if (!prevBuffer.backingStore() || !buffer.initialize(*prevBuffer.backingStore()))
+                return setFailed();
+
+            if (prevBuffer.disposalMethod() == ImageFrame::DisposalMethod::RestoreToBackground) {
+                // We want to clear the previous frame to transparent, without
+                // affecting pixels in the image outside of the frame.
+                const IntRect& prevRect = prevBuffer.backingStore()->frameRect();
+                ASSERT(!prevRect.contains(IntRect(IntPoint(), size())));
+                buffer.backingStore()->clearRect(prevRect);
+            }
+
+            m_frameBackgroundHasAlpha = prevBuffer.hasAlpha() || (prevBuffer.disposalMethod() == ImageFrame::DisposalMethod::RestoreToBackground);
+        }
+
+        buffer.backingStore()->setFrameRect(frameRect);
+        m_frameBackgroundHasAlpha = !frameRect.contains(IntRect(IntPoint(), size()));
+    } else {
+        // This frame doesn't rely on any previous data.
+        if (!buffer.initialize(size(), m_premultiplyAlpha))
+            return setFailed();
+    }
+
+    buffer.setDecoding(ImageFrame::Decoding::Partial);
+    // The buffer is transparent outside the decoded area while the image is loading.
+    // The correct value of 'hasAlpha' for the frame will be set when it is fully decoded.
+    buffer.setHasAlpha(true);
+    return true;
+}
+
+void WEBPImageDecoder::applyPostProcessing(size_t frameIndex)
+{
+    ImageFrame& buffer = m_frameBufferCache[frameIndex];
+    int width;
+    int decodedHeight;
+    if (!WebPIDecGetRGB(m_decoder, &decodedHeight, &width, 0, 0))
+        return; // See also https://bugs.webkit.org/show_bug.cgi?id=74062
+    if (decodedHeight <= 0)
+        return;
+
+    const IntRect& frameRect = buffer.backingStore()->frameRect();
+    ASSERT_WITH_SECURITY_IMPLICATION(width == frameRect.width());
+    ASSERT_WITH_SECURITY_IMPLICATION(decodedHeight <= frameRect.height());
+    const int left = frameRect.x();
+    const int top = frameRect.y();
+
+    // During the decoding of current frame, we may have set some pixels to be transparent (i.e. alpha < 255).
+    // However, the value of each of these pixels should have been determined by blending it against the value
+    // of that pixel in the previous frame. So, we correct these pixels based on disposal method of the previous
+    // frame and the previous frame buffer.
+    // FIXME: This could be avoided if libwebp decoder had an API that used the previous required frame
+    // to do the alpha-blending by itself.
+    if ((m_formatFlags & ANIMATION_FLAG) && frameIndex) {
+        ImageFrame& prevBuffer = m_frameBufferCache[frameIndex - 1];
+        ImageFrame::DisposalMethod prevMethod = prevBuffer.disposalMethod();
+        if (prevMethod == ImageFrame::DisposalMethod::RestoreToPrevious) { // Restore transparent pixels to pixels in previous canvas.
+            ASSERT(prevBuffer.status() == ImageFrame::FrameComplete);
+            for (int y = m_decodedHeight; y < decodedHeight; ++y) {
+                const int canvasY = top + y;
+                for (int x = 0; x < width; ++x) {
+                    const int canvasX = left + x;
+                    RGBA32* pixel = buffer.backingStore()->pixelAt(canvasX, canvasY);
+                    // FIXME: Use alpha-blending when alpha is between 0 and 255.
+                    // Alpha-blending is being implemented in: https://bugs.webkit.org/show_bug.cgi?id=17022
+                    if (!alphaChannel(*pixel)) {
+                        RGBA32 prevPixel = *prevBuffer.backingStore()->pixelAt(canvasX, canvasY);
+                        *pixel = prevPixel;
+                    }
+                }
+            }
+        } else if (prevMethod == ImageFrame::DisposalMethod::RestoreToBackground && frameIndex != 0) {
+            // FIXME: check above should be: buffer.requiredPreviousFrameIndex() != notFound
+            // Note: if the requiredPreviousFrameIndex is |notFound|, there's nothing to do.
+            ASSERT(prevBuffer.status() == ImageFrame::FrameComplete);
+            const IntRect& prevRect = prevBuffer.backingStore()->frameRect();
+            // We need to restore transparent pixels to as they were just after initFrame() call. That is:
+            //   * Transparent if it belongs to prevRect <-- This is a no-op.
+            //   * Pixel in the previous canvas otherwise <-- Need to restore.
+            for (int y = m_decodedHeight; y < decodedHeight; ++y) {
+                const int canvasY = top + y;
+                for (int x = 0; x < width; ++x) {
+                    const int canvasX = left + x;
+                    RGBA32* pixel = buffer.backingStore()->pixelAt(canvasX, canvasY);
+                    // FIXME: Use alpha-blending when alpha is between 0 and 255.
+                    if (!alphaChannel(*pixel) && !prevRect.contains(IntPoint(canvasX, canvasY))) {
+                        RGBA32 prevPixel = *prevBuffer.backingStore()->pixelAt(canvasX, canvasY);
+                        *pixel = prevPixel;
+                    }
+                }
+            }
+        }
+    }
+
+    m_decodedHeight = decodedHeight;
+}
+
+bool WEBPImageDecoder::decode(size_t frameIndex, const WebPIterator* webpFrame, bool onlySize)
 {
     if (failed())
         return false;
 
-    const uint8_t* dataBytes = reinterpret_cast<const uint8_t*>(m_data->data());
-    const size_t dataSize = m_data->size();
+    const uint8_t* dataBytes;
+    size_t dataSize;
+    if (webpFrame) {
+        dataBytes = reinterpret_cast<const uint8_t*>(webpFrame->fragment.bytes);
+        dataSize = webpFrame->fragment.size;
+    } else {
+        dataBytes = reinterpret_cast<const uint8_t*>(m_data->data());
+        dataSize = m_data->size();
+    }
 
     if (!ImageDecoder::isSizeAvailable()) {
         static const size_t imageHeaderSize = 30;
@@ -105,12 +385,11 @@ bool WEBPImageDecoder::decode(bool onlySize)
             return setFailed();
         width = features.width;
         height = features.height;
-        m_hasAlpha = features.has_alpha;
+        m_formatFlags = features.has_alpha ? ALPHA_FLAG : 0;
 #else
         // Earlier version won't be able to display WebP files with alpha.
         if (!WebPGetInfo(dataBytes, dataSize, &width, &height))
             return setFailed();
-        m_hasAlpha = false;
 #endif
         if (!setSize(IntSize(width, height)))
             return setFailed();
@@ -120,35 +399,40 @@ bool WEBPImageDecoder::decode(bool onlySize)
     if (onlySize)
         return true;
 
-    ASSERT(!m_frameBufferCache.isEmpty());
-    ImageFrame& buffer = m_frameBufferCache[0];
+    ASSERT(m_frameBufferCache.size() > frameIndex);
+    ImageFrame& buffer = m_frameBufferCache[frameIndex];
     ASSERT(!buffer.isComplete());
 
     if (buffer.isEmpty()) {
-        if (!buffer.initialize(size(), m_premultiplyAlpha))
+        if (!initFrameBuffer(frameIndex, webpFrame))
             return setFailed();
-        buffer.setDecoding(ImageFrame::Decoding::Partial);
-        buffer.setHasAlpha(m_hasAlpha);
     }
 
     if (!m_decoder) {
-        WEBP_CSP_MODE mode = outputMode(m_hasAlpha);
+        WEBP_CSP_MODE mode = outputMode(m_formatFlags & ALPHA_FLAG);
         if (!m_premultiplyAlpha)
             mode = outputMode(false);
-        int rowStride = size().width() * sizeof(RGBA32);
-        uint8_t* output = reinterpret_cast<uint8_t*>(buffer.backingStore()->pixelAt(0, 0));
-        int outputSize = size().height() * rowStride;
-        m_decoder = WebPINewRGB(mode, output, outputSize, rowStride);
+        m_decoderBuffer.colorspace = mode;
+        m_decoderBuffer.u.RGBA.stride = size().width() * sizeof(RGBA32);
+        m_decoderBuffer.u.RGBA.size = m_decoderBuffer.u.RGBA.stride * size().height();
+        m_decoderBuffer.is_external_memory = 1;
+        m_decoder = WebPINewDecoder(&m_decoderBuffer);
         if (!m_decoder)
             return setFailed();
     }
 
+    ImageBackingStore* backingStore = buffer.backingStore();
+    m_decoderBuffer.u.RGBA.rgba = reinterpret_cast<uint8_t*>(backingStore->pixelAt(backingStore->frameRect().x(), backingStore->frameRect().y()));
+
     switch (WebPIUpdate(m_decoder, dataBytes, dataSize)) {
     case VP8_STATUS_OK:
+        applyPostProcessing(frameIndex);
+        buffer.setHasAlpha((m_formatFlags & ALPHA_FLAG) || m_frameBackgroundHasAlpha);
         buffer.setDecoding(ImageFrame::Decoding::Complete);
         clear();
         return true;
     case VP8_STATUS_SUSPENDED:
+        applyPostProcessing(frameIndex);
         return false;
     default:
         clear();                         
diff --git a/Source/WebCore/platform/image-decoders/webp/WEBPImageDecoder.h b/Source/WebCore/platform/image-decoders/webp/WEBPImageDecoder.h
index e282b22..f6b155d7 100644
--- a/Source/WebCore/platform/image-decoders/webp/WEBPImageDecoder.h
+++ b/Source/WebCore/platform/image-decoders/webp/WEBPImageDecoder.h
@@ -33,6 +33,7 @@
 #if USE(WEBP)
 
 #include "webp/decode.h"
+#include "webp/demux.h"
 
 namespace WebCore {
 
@@ -43,15 +44,28 @@ public:
 
     String filenameExtension() const override { return "webp"; }
     bool isSizeAvailable() override;
+    size_t frameCount() const override;
+    void setData(SharedBuffer& data, bool allDataReceived) override;
+    int repetitionCount() const override;
     ImageFrame* frameBufferAtIndex(size_t index) override;
 
 private:
-    bool decode(bool onlySize);
+    bool decode(size_t frameIndex, const WebPIterator* webpFrame, bool onlySize);
 
     WebPIDecoder* m_decoder;
-    bool m_hasAlpha;
+    WebPDecBuffer m_decoderBuffer;
+    int m_formatFlags;
+    bool m_frameBackgroundHasAlpha;
 
-    void applyColorProfile(const uint8_t*, size_t, ImageFrame&) { };
+    WebPDemuxer* m_demux;
+    WebPDemuxState m_demuxState;
+    bool m_haveAlreadyParsedThisData;
+    int m_repetitionCount;
+    int m_decodedHeight;
+
+    bool updateDemuxer();
+    bool initFrameBuffer(size_t frameIndex, const WebPIterator* webpFrame);
+    void applyPostProcessing(size_t frameIndex);
     void clear();
 };
 
diff --git a/Source/cmake/FindWebP.cmake b/Source/cmake/FindWebP.cmake
index 6772352..de6e06c 100644
--- a/Source/cmake/FindWebP.cmake
+++ b/Source/cmake/FindWebP.cmake
@@ -33,19 +33,33 @@ find_package(PkgConfig)
 pkg_check_modules(PC_WEBP QUIET libwebp)
 
 # Look for the header file.
-find_path(WEBP_INCLUDE_DIRS
+find_path(WEBP_INCLUDE_DIR
     NAMES webp/decode.h
     HINTS ${PC_WEBP_INCLUDEDIR} ${PC_WEBP_INCLUDE_DIRS}
 )
-mark_as_advanced(WEBP_INCLUDE_DIRS)
+list(APPEND WEBP_INCLUDE_DIRS ${WEBP_INCLUDE_DIR})
+mark_as_advanced(WEBP_INCLUDE_DIRS) # FIXME
 
 # Look for the library.
 find_library(
-    WEBP_LIBRARIES
+    WEBP_LIBRARY
     NAMES webp
     HINTS ${PC_WEBP_LIBDIR} ${PC_WEBP_LIBRARY_DIRS}
 )
-mark_as_advanced(WEBP_LIBRARIES)
+list(APPEND WEBP_LIBRARIES ${WEBP_LIBRARY})
+mark_as_advanced(WEBP_LIBRARIES) # FIXME
+
+find_path(WEBP_DEMUX_INCLUDE_DIR
+  NAMES webp/demux.h
+  HINTS ${PC_WEBP_INCLUDEDIR} ${PC_WEBP_INCLUDE_DIRS}
+)
+list(APPEND WEBP_INCLUDE_DIRS ${WEBP_DEMUX_INCLUDE_DIR})
+
+find_library(WEBP_DEMUX_LIBRARY
+  NAMES webpdemux
+  HINTS ${PC_WEBP_LIBDIR} ${PC_WEBP_LIBRARY_DIRS}
+)
+list(APPEND WEBP_LIBRARIES ${WEBP_DEMUX_LIBRARY})
 
 include(FindPackageHandleStandardArgs)
 FIND_PACKAGE_HANDLE_STANDARD_ARGS(WEBP DEFAULT_MSG WEBP_INCLUDE_DIRS WEBP_LIBRARIES)
